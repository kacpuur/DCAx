import './safeMath.sol';
import './IERC20.sol';
import './context.sol';

pragma solidity ^0.8.7;
// SPDX-License-Identifier: MIT


contract FiPiStacking is Ownable {
    using SafeMath for uint256;

    struct UserInfo {
        uint256 amount;
        bool withdrawRequested;
        uint256 releaseDate;
        uint256 lastClaimBlock;
    }

    IERC20 fipiToken;

    //it could be different from contract token balance, because rewards has external source added by owner
    uint256 totalTokenStacked; 



    address public devAddr;
    
    uint256 public rewardPerBlock;


    mapping (address => UserInfo) public userInfo;
    
    uint256 public startBlock;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 amount);
    event Claimed(uint256 amount);

    constructor(
        IERC20 _fipiToken,
        uint256 _rewardPerBlock
    ) {
        fipiToken = _fipiToken;
        devAddr = _msgSender();
        rewardPerBlock = _rewardPerBlock;
    }

    
    function deposit(uint256 _amount) public {
        
        UserInfo storage user = userInfo[msg.sender];

        require(user.withdrawRequested == false, "You can not deposit tokens while withdrawing");

        totalTokenStacked = totalTokenStacked.add(_amount);
        
        if (user.amount == 0)
        {
            user.lastClaimBlock = block.number;
            user.amount = _amount;
        }
        else
        {
            claimAndRestake();
            user.amount = user.amount.add( _amount);
        }
        
        fipiToken.transferFrom(msg.sender, address(this), _amount);
        emit Deposit(msg.sender, _amount);
    }


    

    function claimAndRestake() public  {

        UserInfo storage user = userInfo[_msgSender()];
        require(user.withdrawRequested == false, "You can not claim any rewards when you already initialize a withdraw");

        uint256 claimableAmount = calculateClaimableTokens(user.amount, user.lastClaimBlock);

        user.lastClaimBlock = block.number;
        user.amount = user.amount.add(claimableAmount);
        totalTokenStacked = totalTokenStacked.add(claimableAmount);
        
        emit Claimed(claimableAmount);

    }

    function claimAndWithdraw() public  {

        UserInfo storage user = userInfo[_msgSender()];
        require(user.withdrawRequested == false, "You can not claim any rewards when you already initialize a withdraw");
        
        uint256 claimableAmount = calculateClaimableTokens(user.amount, user.lastClaimBlock);

        user.lastClaimBlock = block.number;
        fipiToken.transfer(msg.sender, claimableAmount);

        emit Claimed(claimableAmount);

    }


    function pendingRewards(address _user) external view returns (uint256) 
    {
        UserInfo storage user = userInfo[_user];
        
        if(user.withdrawRequested)
        {
            return 0;
        }
        
        uint256 claimableAmount = calculateClaimableTokens(user.amount, user.lastClaimBlock);
        return claimableAmount;
    }


    function initWithdraw() public{
        UserInfo storage user = userInfo[msg.sender];
        claimAndRestake();

        require(user.amount >= 0, "You have no tokens to withdraw");
        require(user.withdrawRequested == false, "You already initialize withdraw");
        user.releaseDate = block.timestamp + 1209600;
        user.withdrawRequested = true;

    }

    function withdraw() public {
        
        UserInfo storage user = userInfo[msg.sender];

        require(user.amount >0, "You have no tokens to withdraw");
        require(user.withdrawRequested == true, "You need to initialize your withdraw first" );
        require(block.timestamp > user.releaseDate, "You can't withdraw yet" );
        
        uint256 tokensToWithdraw = user.amount;


        totalTokenStacked = totalTokenStacked.sub(tokensToWithdraw);
        user.withdrawRequested = false;
        user.releaseDate = 0;
        fipiToken.transfer(msg.sender, tokensToWithdraw);

        emit Withdraw(msg.sender, tokensToWithdraw);
    }

    function calculateClaimableTokens(uint256 amount, uint256 lastClaimBlock ) internal view returns (uint256) {
        
        uint256 howManyBlocksArePending = block.number.sub(lastClaimBlock);
        uint256 rewardPerUserShare = rewardPerBlock.mul(amount).div(totalTokenStacked);
        uint256 claimableAmount = howManyBlocksArePending.mul(rewardPerUserShare);
        return claimableAmount;
    }

}